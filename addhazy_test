import numpy as np
import cv2
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter
import os
import glob
from tqdm import tqdm
import random
import math


def atmospheric_scattering(image, beta=0.75, A=0.5, depth_map=None, depth_factor=1.0, pattern="uniform"):
    if image.dtype == np.uint8:
        image = image.astype(np.float32) / 255.0

    height, width = image.shape[:2]

    if depth_map is None:
        if pattern == "uniform":
            # 创建一个更均匀的深度图，带有细微变化
            base_depth = np.ones((height, width)) * 0.5
            noise = np.random.rand(height, width) * 0.5
            smoothed_noise = gaussian_filter(noise, sigma=30)
            depth_map = base_depth + smoothed_noise

        elif pattern == "center":
            # 创建一个中心更深的深度图
            y, x = np.ogrid[:height, :width]
            center_y, center_x = height / 2, width / 2
            # 计算到中心的距离
            dist_from_center = np.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
            # 归一化到 [0, 1]
            max_dist = np.sqrt(center_x ** 2 + center_y ** 2)
            depth_map = 1.0 - (dist_from_center / max_dist)

        elif pattern == "random":
            # 创建一个完全随机但平滑的深度图
            noise = np.random.rand(height, width)
            depth_map = gaussian_filter(noise, sigma=20)

        elif pattern == "horizontal":
            # 创建一个水平梯度深度图
            x_gradient = np.linspace(0, 1, width).reshape(1, -1)
            base_depth = np.tile(x_gradient, (height, 1))
            noise = np.random.rand(height, width) * 0.3
            smoothed_noise = gaussian_filter(noise, sigma=30)
            depth_map = base_depth * 0.7 + smoothed_noise * 0.3

        else:  # 默认为均匀分布
            base_depth = np.ones((height, width)) * 0.5
            noise = np.random.rand(height, width) * 0.5
            smoothed_noise = gaussian_filter(noise, sigma=30)
            depth_map = base_depth + smoothed_noise

        # 归一化深度图到 [0, 1] 范围
        depth_map = (depth_map - depth_map.min()) / (depth_map.max() - depth_map.min())
        depth_map = depth_map * depth_factor

    transmission = np.exp(-beta * depth_map)

    if len(image.shape) == 3:
        transmission = np.expand_dims(transmission, axis=2)
        if isinstance(A, (list, tuple)) and len(A) == 3:
            A_map = np.ones_like(image)
            for i in range(3):
                A_map[:, :, i] = A[i]
        else:
            A_map = np.ones_like(image) * A
    else:
        A_map = A

    hazy_image = image * transmission + A_map * (1 - transmission)
    hazy_image = np.clip(hazy_image, 0, 1)
    hazy_image = (hazy_image * 255).astype(np.uint8)

    return hazy_image


def apply_night_effect(image, brightness_factor=0.4, blue_tint=(0.0, 0.0, 0.1)):
    image = image.astype(np.float32) / 255.0
    image_dark = image * brightness_factor
    blue_overlay = np.ones_like(image) * blue_tint
    blended = image_dark * 0.7 + blue_overlay * 0.3
    blended = np.clip(blended, 0, 1)
    return (blended * 255).astype(np.uint8)

def process_image_folder(input_folder, output_folder, resize=None):
    os.makedirs(output_folder, exist_ok=True)

    haze_levels = {
        #四种不同程度的雾霾

        #A_range:控制雾霾的亮度和颜色，A表示大气光范围，通常是一个标量值或者RGB向量，雾霾越浓，A 的值通常越大（更亮）
        #A 决定雾霾的 颜色和亮度，标量值：控制整体亮度（值越大，雾霾越亮）；RGB 值：控制雾霾颜色（如黄、灰）

        #t_range:控制雾霾的浓度（透射率越低，雾霾越浓）；t=1表示无雾，光线完全穿透，t=0：完全被雾霾遮挡
        #t决定雾霾的浓度，值越小，雾霾越浓，景物越模糊
        "light": {"A_range": [1.00, 1.08], "t_range": [0.65, 0.75]},

        "medium": {"A_range": [1.09, 1.19], "t_range": [0.45, 0.65]},

        "heavy": {"A_range": [1.20, 1.3], "t_range": [0.35, 0.45]},

        "severe": {"A_range": [1.35, 1.5], "t_range": [0.2, 0.3]},

        #三种特殊情况的雾霾
        "yellow": {"A_range": [[0.85, 0.75, 0.4], [0.95, 0.85, 0.5]], "t_range": [0.3, 0.5]},
        #雾霾颜色从暗黄（R=0.85, G=0.75, B=0.4）到亮黄（R=0.95, G=0.85, B=0.5）
        "gray": {"A_range": [[0.6, 0.6, 0.6], [0.9, 0.9, 0.9]], "t_range": [0.3, 0.5]},
        #RGB 三个通道值相等，雾霾颜色从深灰（0.6）到浅灰（0.9）
        "night": {"A_range": [1.1, 1.2], "t_range": [0.45, 0.65]}
    }

    haze_types = []

    patterns = ["uniform", "center", "random", "horizontal"]

    for haze_name, params in haze_levels.items():
        t_min, t_max = params["t_range"]
        t_target = random.uniform(t_min, t_max)
        beta = -math.log(t_target) / 1.0
        A_range = params["A_range"]
        if isinstance(A_range[0], list):
            A = [random.uniform(A_range[0][i], A_range[1][i]) for i in range(3)]
        else:
            A = random.uniform(A_range[0], A_range[1])

        # 为每种雾霾类型随机选择一种模式，或者您可以指定特定模式
        pattern = random.choice(patterns)
        haze_types.append({
                "name": haze_name,
                "beta": round(beta, 3),
                "A": A,
                "depth_factor": 1.0,
                "pattern": pattern
        })

    for haze_type in haze_types:
        haze_folder = os.path.join(output_folder, haze_type["name"])
        os.makedirs(haze_folder, exist_ok=True)

    image_extensions = ['*.jpg', '*.jpeg', '*.png', '*.bmp']
    image_files = []
    for ext in image_extensions:
        image_files.extend(glob.glob(os.path.join(input_folder, ext)))
        image_files.extend(glob.glob(os.path.join(input_folder, ext.upper())))

    print(f"找到 {len(image_files)} 张图像")

    for image_path in tqdm(image_files, desc="处理图像"):
        image = cv2.imread(image_path)
        if image is None:
            print(f"无法读取图像: {image_path}")
            continue
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        if resize:
            image = cv2.resize(image, resize)
        base_name = os.path.splitext(os.path.basename(image_path))[0]

        for haze_type in haze_types:
            if haze_type["name"] == "night":
                hazy_image = atmospheric_scattering(
                    image, beta=haze_type["beta"], A=haze_type["A"],
                    depth_factor=haze_type["depth_factor"],
                    pattern=haze_type["pattern"]
                )
                hazy_image = apply_night_effect(hazy_image)
            else:
                hazy_image = atmospheric_scattering(
                    image, beta=haze_type["beta"], A=haze_type["A"],
                    depth_factor=haze_type["depth_factor"],
                    pattern=haze_type["pattern"]
                )
            hazy_image_bgr = cv2.cvtColor(hazy_image, cv2.COLOR_RGB2BGR)
            output_path = os.path.join(output_folder, haze_type["name"], f"{base_name}.jpg")
            cv2.imwrite(output_path, hazy_image_bgr)

def visualize_depth_map(depth_map, output_path):
    plt.figure(figsize=(10, 8))
    plt.imshow(depth_map, cmap='viridis')
    plt.colorbar(label='Depth')
    plt.title('Depth Map Visualization')
    plt.savefig(output_path)
    plt.close()


def main():
    input_folder = "E:/test_addhazy/clear_images"
    output_folder = "E:/test_addhazy/addhazy_final_3"

    process_image_folder(input_folder, output_folder, resize=(512, 512))
    print("所有图像处理完成！雾霾图像已保存到", output_folder)

    show_examples = True
    if show_examples:
        image_files = glob.glob(os.path.join(input_folder, "*.jpg"))
        if not image_files:
            image_files = glob.glob(os.path.join(input_folder, "*.png"))
        if image_files:
            original_image = cv2.imread(image_files[0])
            original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
            if original_image.shape[:2] != (512, 512):
                original_image = cv2.resize(original_image, (512, 512))
            base_name = os.path.splitext(os.path.basename(image_files[0]))[0]
            haze_types_first_row = ["light", "medium", "heavy", "severe"]
            haze_types_second_row = ["yellow", "gray", "night"]

            plt.figure(figsize=(20, 10))

            # 第一行
            plt.subplot(2, 5, 1)
            plt.imshow(original_image)
            plt.title("Original")
            plt.axis('off')
            for i, name in enumerate(haze_types_first_row):
                path = os.path.join(output_folder, name, f"{base_name}.jpg")
                if os.path.exists(path):
                    img = cv2.imread(path)
                    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                    plt.subplot(2, 5, i + 2)
                    plt.imshow(img)
                    plt.title(name.capitalize())
                    plt.axis('off')

            # 第二行
            for i, name in enumerate(haze_types_second_row):
                path = os.path.join(output_folder, name, f"{base_name}.jpg")
                if os.path.exists(path):
                    img = cv2.imread(path)
                    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                    plt.subplot(2, 5, 6 + i)
                    plt.imshow(img)
                    plt.title(name.capitalize())
                    plt.axis('off')

            plt.tight_layout()
            comparison_path = os.path.join(output_folder, "full_comparison.png")
            plt.savefig(comparison_path)
            plt.show()
            print(f"对比图已保存到: {comparison_path}")


if __name__ == "__main__":
    main()
